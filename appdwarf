#!/bin/sh
set -e # exit on failure
IFS=$(printf '\n\t') # smarter ifs

appmk() {
    appdwarf "$DIR"
    mv "$DIR".sh "$(dirname "$(realpath "$0")")/bin/$APP"
    rm -rf "$DIR"
}

apprun() {
    export PATH="$APPDIR"/bin:"$PATH"
    export LD_LIBRARY_PATH="$APPDIR"/lib64:"$APPDIR"/lib:"$LD_LIBRARY_PATH"
    exec "$APPDIR/$(basename "$ARGV0")" "$@"
}

arun() {
    outfunc apprun > "$1"
    chmod +x "$1"
}

brun() {
    outfunc apprun | sed '5s#/#/bin/#' > "$1"
    chmod +x "$1"
}

appa() { arun "$DIR"/AppRun; }
appb() { brun "$DIR"/AppRun; }

unarc() { curl -L "$LINK" | bsdtar xf - -C"$DIR"; }
unbz() { curl -L "$LINK" | tar xj -C"$DIR"; }
ungz() { curl -L "$LINK" | tar xz -C"$DIR"; }
unxz() { curl -L "$LINK" | tar xJ -C"$DIR"; }
un7z() {
    aria2c "$LINK" -d "$DIR" -o "$1"
    7z x -y -o"$DIR" "$DIR"/"$1"
}

bundlehead() {
    mountbin=$(mktemp) # use provided offsets to supply dwarfs binary
    #shellcheck disable=SC2154
    tail -n+"$off" "$0" | head -n"$len" | head -c-1 | zstd -cqd > "$mountbin"
    #shellcheck disable=SC2317
    dwarfs() { chmod +x "$mountbin"; "$mountbin" "$@"; rm "$mountbin"; }
}

header() {
    APPDIR=$(mktemp -d) APPIMAGE="$(realpath "$0")"
    export APPDIR APPIMAGE ARGV0="$0" OWD="$PWD"
    dwarfs -o offset=auto -o tidy_strategy=swap -o workers="$(nproc)" "$0" "$APPDIR"
    trap 'fusermount -quz $APPDIR; rmdir $APPDIR' 0 1 2 3 6 14 15 EXIT
    "$APPDIR/AppRun" "$@"
    fusermount -quz "$APPDIR" || true
    exit $?
}

outfunc() {
    echo '#!/bin/sh'
    echo 'set -e' # running outfunc with no input just prints these two lines
    sed -n "/^$1() {$/,/^}$/s/^ *//p" "$0" | tail -n+2 | head -n-1
}

unappimage() {
    test "$(hexdump -n11 -e'"%x"' "$1")" = 464c457f1010224941 || return 1
    echo "AppImage found. Extracting..." # appimage magic matched
    o=$(($(readelf -h "$1" | sed -e 's/[^0-9]//g;13p;18,19p;d' | sed -e 1a+ -e 2a*)))
    unsquashfs -o "$o" "$@" # calculate offset via ELF header
}

zzexe() {
    [ "$1" = "-p" ] && p="$2" && shift # save prefix if present
    shift; out=$(mktemp) # make tmp file to avoid io operations
    { outfunc
        echo "off=$(($( (outfunc; outfunc zzexe_header) | wc -l)+2))"
        outfunc zzexe_header | sed -e "3s/)$/${1##*[./]})/" -e "8s/^/$p /"
        zstdmt -cq19 "$@"
    } > "$out"
    mv "$out" "$1"
    chmod +x "$1"
    exit
}

zzexe_header() {
    dir="$(dirname "$0")" out=$(mktemp -t .zzXXXX.)
    tail -n+"$off" "$0" | zstd -cd > "$out"
    chmod +x "$out"
    [ ! -f "$dir/$(basename "$out")" ] && ln -s "$out" "$dir"
    trap 'rm -f "$out" "$dir/$(basename "$out")"'  0 1 2 3 6 14 15 EXIT
    "$dir/$(basename "$out")" "$@"
    exit $?
}

if [ "$SOURCE" ]; then
    unset SOURCE
    trap 'rm -rf "$DIR"' 0 1 2 3 6 14 15 EXIT
    APP=$(basename "$0" | sed 's/^mk//')
    DIR=/tmp/appdwarf/$APP
    mkdir -p "$DIR"
    return
fi

case "$1" in
    -a )
        arun "$2"
        exit ;;
    -b )
        brun "$2"
        exit ;;
    --bundle ) # allow bundling dwarfs binary
        bundle=$(realpath "$2")
        shift 2;;
    -d | --decompress )
        d=dwarfs-root # just to keep line shorter, extract if file is dwarfs
        dwarfsck -d0 -i"$2" && mkdir $d && dwarfsextract -o $d -i "$2" && exit
        tmp=$(mktemp) # make tmp file to avoid io operations
        unappimage "$2" && exit # also extract appimages cuz we can
        tail -n+"$(sed -n '3s/^off=//p' "$2")" "$2" | zstd -cd > "$tmp"
        mv "$tmp" "$2"
        chmod +x "$2"
        exit ;;
    -f | --fetch )
        fetch=1
        shift ;;
    -g | --get )
        gh run -R phantop/appdwarf download -n "$2"
        file="$(echo "$2" | sed 's/^arch-//')"
        chmod +x "$file"
        exit ;;
    -p | -z | --prefix | --zzexe )
        zzexe "$@" ;;
    --version | -v )
        printf '\e[32m'
        echo 'appdwarf 2024.07.04'
        printf '\e[36m'
        echo Built by July 🏳️‍🌈
        printf '\e[0m'
        exit ;;
    -* | '' )
        echo "Usage: appdwarf [option] [APP/FILE/FOLDER/URL] [compression options]"
        echo "  -a [FILE]                   write example AppRun file"
        echo "  -b [FILE]                   write bin subdir AppRun file"
        echo "  -d, --decompress [FILE]     decompress a compressed program"
        echo
        echo "  --bundle [path/to/dwarfs]   bundle dwarfs with the appdwarf image"
        echo "  -f, --fetch                 only fetch a remote AppImage"
        echo "  -g, --get                   download a prebuild appdwarf from actions"
        echo
        echo "  -p, --prefix [PREFIX]       zzexe a file with prefix"
        echo "  -z, --zzexe                 zzexe a file"
        echo
        echo "  -h, --help                  Print this help text"
        echo "  -v, --version               Print the appdwarf version"; exit ;;
esac

if [ ! -d "$1" ]; then # directory doesn't exist, see if this is an appimage
    if [ ! -f "$1" ]; then # file doesn't exist, see if this is a url
        if ! echo "$1" | grep -q / ; then # AppImageHub
            echo "Checking AppImageHub for this program..."
            app=https://github.com/AppImage/appimage.github.io/raw/master/apps/$1.md
            shift
            set -- "$(curl -L "$app" | grep -o https.\*releases | sed 's|/releases$||')" "$@"
        elif ! echo "$1" | grep https ; then # GitHub in Author/Repo format
            app=$1
            shift
            set -- "https://github.com/$app" "$@"
        fi

        if echo "$1" | grep -q 'https://github.com/[^/]*/[^/]*/*$'; then # GitHub url
            echo "Assuming this is a GitHub repo..."
            app="$(echo "${1%/}"/releases | sed 's|github.com|api.github.com/repos|')"
            api="$(curl "$app" | jq -r .[].assets[].browser_download_url | grep 'AppImage$')"
            url="$(echo "$api" | grep "$(uname -m)" || echo "$api" | grep -vEe '-(aarch|arm)(64|hf)\.AppImage')"
            shift
            set -- "$(echo "$url" | head -n1)" "$@"
        fi

        app=$(basename "$1") # actually try to get the appimage
        if aria2c -x16 -s16 "$1" -o "$app" || wget "$1" -O "$app"; then
            shift
            set -- "$app" "$@"
            test "$fetch" && chmod +x "$1" && exit
        else
            printf '\e[31m' >&2
            echo "No valid remote or local input found. Exiting..." >&2
            printf '\e[0m' >&2
            rm -f "$app"; exit 1
        fi
    fi

    # this is a file, but it might be an existing dwarfs image
    if dwarfsck -d0 -i"$1"; then
        set -- "$@" --recompress=none
    elif unappimage "$1"; then
        app="$(basename "$1" .AppImage)"
        rm -rf "$1" "$app"
        mv squashfs-root "$app"
        shift
        set -- "$app" "$@"
    else
        printf '\e[34m'
        echo "$1 is not an AppImage, it will be zzexe'd"
        printf '\e[0m'
        zzexe -z "$@"
    fi
    fi

    head="$(mktemp)"
    if [ "$bundle" ]; then { # behavior for bundling a dwarfs executable
        zdata="$(mktemp)"
        zstd -cq "$bundle" > "$zdata"
        outfunc
        echo "off=$(($( (outfunc; outfunc bundlehead; outfunc header) | wc -l)+3))" 
        echo "len=$(($(wc -l < "$zdata")+1))"
        outfunc bundlehead
    } > "$head"
    fi
    outfunc header >> "$head"
    test "$bundle" && cat "$zdata" >> "$head"
    echo >> "$head"

    mkdwarfs -o "$(realpath "$1").sh" -B5 --header "$head" -i "$@" --categorize=pcmaudio -C pcmaudio/waveform::flac:level=8
    rm -rf "$head" "$1"
    chmod +x "$(realpath "$1").sh"
